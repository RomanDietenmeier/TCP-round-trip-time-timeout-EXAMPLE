/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/constants.ts":
/*!**************************!*\
  !*** ./src/constants.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initialRTTPoints": () => (/* binding */ initialRTTPoints)
/* harmony export */ });
var initialRTTPoints = [
    214.93366724112192, 228.0693006177108, 194.63023377156003, 191.3277541941572,
    170.38355957908368, 219.97537576960735, 190.153684877579, 211.86321565068653,
    170.7521759235892, 250.54684515378972, 225.51591362082897, 173.2700071315282,
    213.88239576969826, 242.62225008037697, 177.2942210588158, 215.4961204502749,
    219.4681944826237, 210.630333226394, 222.89031229904742, 218.70912845956485,
];


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ "./src/constants.ts");

var minRTTinput = document.getElementById("minRTTinput");
var maxRTTinput = document.getElementById("maxRTTinput");
var baselineInput = document.getElementById("baselineInput");
var pointsInput = document.getElementById("pointsInput");
var deviationInput = document.getElementById("deviationInput");
var alphaERTTInput = document.getElementById("alphaInput");
var betaDevRTTInput = document.getElementById("betaInput");
var randomGenerationButton = document.getElementById("rdmGenButton");
var showERTTCheckbox = document.getElementById("erttCheckbox");
var showDevRTTCheckbox = document.getElementById("devrttCheckbox");
var showTimeoutCheckbox = document.getElementById("timeoutCheckbox");
var canvas = document.getElementById("canvas");
var canvasContext = canvas.getContext("2d");
function clearCanvas() {
    canvasContext.clearRect(0, 0, canvas.width, canvas.height);
}
function diagram() {
    var state = {
        initialState: function () { },
        randomGeneration: function () { },
        calcTimeoutInterval: function () { },
        draw: function () { },
        rttPoints: [],
        erttPoints: [],
        devRTTPoints: [],
        timeoutIntervalPoints: [],
    };
    function drawRTTDeviation() {
        var minRTT = parseInt(minRTTinput.value);
        var maxRTT = parseInt(maxRTTinput.value);
        canvasContext.strokeStyle = "#0008";
        canvasContext.lineWidth = 7;
        canvasContext.beginPath();
        for (var i = 0; i < state.rttPoints.length; i++) {
            var canvasX = canvas.width * (i / (state.rttPoints.length - 1));
            var canvasY = canvas.height -
                canvas.height * ((state.rttPoints[i] - minRTT) / (maxRTT - minRTT));
            var yDeviation = canvasY * (state.devRTTPoints[i] / (maxRTT - minRTT));
            canvasContext.moveTo(canvasX, canvasY + yDeviation);
            canvasContext.lineTo(canvasX, canvasY - yDeviation);
        }
        canvasContext.stroke();
    }
    function drawPoints(points, color) {
        var minRTT = parseInt(minRTTinput.value);
        var maxRTT = parseInt(maxRTTinput.value);
        canvasContext.fillStyle = color;
        canvasContext.strokeStyle = color;
        canvasContext.lineWidth = 2;
        canvasContext.beginPath();
        var previousCanvasX = 0;
        var previousCanvasY = 0;
        for (var i = 0; i < points.length; i++) {
            var canvasX = canvas.width * (i / (points.length - 1));
            var canvasY = canvas.height -
                canvas.height * ((points[i] - minRTT) / (maxRTT - minRTT));
            canvasContext.fillRect(canvasX - 3, canvasY - 3, 7, 7);
            if (i > 0) {
                canvasContext.moveTo(previousCanvasX, previousCanvasY);
                canvasContext.lineTo(canvasX, canvasY);
            }
            previousCanvasX = canvasX;
            previousCanvasY = canvasY;
        }
        canvasContext.stroke();
    }
    function initialState() {
        showERTTCheckbox.checked = true;
        showDevRTTCheckbox.checked = true;
        showTimeoutCheckbox.checked = true;
        clearCanvas();
        minRTTinput.value = "100";
        maxRTTinput.value = "350";
        baselineInput.value = "200";
        pointsInput.value = "20";
        deviationInput.value = "35";
        alphaERTTInput.value = "12.5";
        betaDevRTTInput.value = "25";
        state.rttPoints = _constants__WEBPACK_IMPORTED_MODULE_0__.initialRTTPoints;
        state.erttPoints = [];
        state.devRTTPoints = [];
        state.timeoutIntervalPoints = [];
        state.calcTimeoutInterval();
    }
    function draw() {
        clearCanvas();
        var drawERTT = showERTTCheckbox.checked;
        var drawDevRTT = showDevRTTCheckbox.checked;
        var drawTimeout = showTimeoutCheckbox.checked;
        var minRTT = parseInt(minRTTinput.value);
        var maxRTT = parseInt(maxRTTinput.value);
        canvasContext.strokeStyle = "#808080";
        canvasContext.fillStyle = "#000";
        canvasContext.lineWidth = 2;
        canvasContext.font = "1rem Consolas";
        canvasContext.beginPath();
        canvasContext.moveTo(0, 0);
        canvasContext.lineTo(0, canvas.height);
        for (var i = 0; i <= maxRTT - minRTT; i += 50) {
            var value = canvas.height - (i / (maxRTT - minRTT)) * canvas.height;
            canvasContext.moveTo(0, value);
            canvasContext.lineTo(canvas.width, value);
            canvasContext.fillText("".concat(minRTT + i), 0, value - 2);
        }
        var count = 1;
        var previousI = 0;
        for (var i = 0; i <= canvas.width; i += canvas.width / state.rttPoints.length) {
            if (i - previousI > 40) {
                canvasContext.moveTo(i, canvas.height);
                canvasContext.lineTo(i, canvas.height - 10);
                canvasContext.fillText("".concat(count), i, canvas.height - 2);
                previousI = i;
            }
            count++;
        }
        canvasContext.stroke();
        drawPoints(state.rttPoints, "#00f");
        if (drawERTT)
            drawPoints(state.erttPoints, "magenta");
        if (drawDevRTT)
            drawRTTDeviation();
        if (drawTimeout)
            drawPoints(state.timeoutIntervalPoints, "red");
    }
    function randomGeneration() {
        var baseline = parseInt(baselineInput.value);
        var minRTT = parseInt(minRTTinput.value);
        var maxRTT = parseInt(maxRTTinput.value);
        var deviationPercentage = parseInt(deviationInput.value) / 100;
        var baselineAddLimit = maxRTT - baseline;
        var baselineSubLimit = baseline - minRTT;
        var pointCount = parseInt(pointsInput.value);
        state.rttPoints = [];
        for (var i = 0; i < pointCount; i++) {
            var percentage = Math.random();
            var value = baseline;
            if (Math.random() >= 0.5) {
                //Add
                value += percentage * baselineAddLimit * deviationPercentage;
            }
            else {
                //Subtract
                value -= percentage * baselineSubLimit * deviationPercentage;
            }
            state.rttPoints.push(value);
        }
        calcTimeoutInterval();
        draw();
    }
    function calcTimeoutInterval() {
        if (state.rttPoints.length <= 0)
            return;
        var alphaERTT = parseInt(alphaERTTInput.value) / 100;
        var betaDevRTT = parseInt(betaDevRTTInput.value) / 100;
        state.erttPoints = [state.rttPoints[0]];
        state.devRTTPoints = [];
        state.timeoutIntervalPoints = [parseInt(maxRTTinput.value)];
        for (var i = 0; i < state.rttPoints.length - 1; i++) {
            if (i <= 0) {
                state.erttPoints.push(state.rttPoints[i]);
                state.devRTTPoints.push(Math.abs(state.rttPoints[i] - state.erttPoints[i]));
            }
            else {
                state.erttPoints.push((1 - alphaERTT) * state.erttPoints[i - 1] +
                    alphaERTT * state.rttPoints[i]);
                state.devRTTPoints.push((1 - betaDevRTT) * state.devRTTPoints[i - 1] +
                    betaDevRTT * Math.abs(state.rttPoints[i] - state.erttPoints[i]));
            }
            state.timeoutIntervalPoints.push(state.erttPoints[i] + 4 * state.devRTTPoints[i]);
        }
    }
    state.initialState = initialState;
    state.draw = draw;
    state.randomGeneration = randomGeneration;
    state.calcTimeoutInterval = calcTimeoutInterval;
    state.initialState();
    return state;
}
var rttDiagram = diagram();
rttDiagram.draw();
randomGenerationButton.onclick = rttDiagram.randomGeneration;
showERTTCheckbox.onchange = function () {
    rttDiagram.draw();
};
showDevRTTCheckbox.onchange = function () {
    rttDiagram.draw();
};
showTimeoutCheckbox.onchange = function () {
    rttDiagram.draw();
};
minRTTinput.onchange = function () {
    var value = parseInt(minRTTinput.value);
    if (value < 0) {
        minRTTinput.value = "0";
    }
    var maxValue = parseInt(maxRTTinput.value);
    if (value > maxValue) {
        minRTTinput.value = maxRTTinput.value;
    }
    if (parseInt(baselineInput.value) < value) {
        baselineInput.value = minRTTinput.value;
    }
};
maxRTTinput.onchange = function () {
    var value = parseInt(maxRTTinput.value);
    if (value < 0) {
        maxRTTinput.value = "0";
    }
    var minValue = parseInt(minRTTinput.value);
    if (value < minValue) {
        maxRTTinput.value = minRTTinput.value;
    }
    if (parseInt(baselineInput.value) > value) {
        baselineInput.value = maxRTTinput.value;
    }
};
baselineInput.onchange = function () {
    var value = parseInt(baselineInput.value);
    if (value < parseInt(minRTTinput.value)) {
        baselineInput.value = minRTTinput.value;
    }
    if (value > parseInt(maxRTTinput.value)) {
        baselineInput.value = maxRTTinput.value;
    }
};
function setRemRootOnResize() {
    var pixelAmount = document.body.clientWidth / 65;
    document.documentElement.style.fontSize = "".concat(pixelAmount, "px");
}
setRemRootOnResize();
window.onresize = setRemRootOnResize;

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,